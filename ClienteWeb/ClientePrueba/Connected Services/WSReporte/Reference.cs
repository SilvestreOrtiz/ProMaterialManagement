//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientePrueba.WSReporte {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Reporte", Namespace="http://schemas.datacontract.org/2004/07/WSMateriales.Entidades")]
    [System.SerializableAttribute()]
    public partial class Reporte : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string admin_proyectoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descripcion_proyectoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> fecha_reportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idReportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> id_MaterialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nombre_proyectoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string admin_proyecto {
            get {
                return this.admin_proyectoField;
            }
            set {
                if ((object.ReferenceEquals(this.admin_proyectoField, value) != true)) {
                    this.admin_proyectoField = value;
                    this.RaisePropertyChanged("admin_proyecto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string descripcion_proyecto {
            get {
                return this.descripcion_proyectoField;
            }
            set {
                if ((object.ReferenceEquals(this.descripcion_proyectoField, value) != true)) {
                    this.descripcion_proyectoField = value;
                    this.RaisePropertyChanged("descripcion_proyecto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> fecha_report {
            get {
                return this.fecha_reportField;
            }
            set {
                if ((this.fecha_reportField.Equals(value) != true)) {
                    this.fecha_reportField = value;
                    this.RaisePropertyChanged("fecha_report");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idReport {
            get {
                return this.idReportField;
            }
            set {
                if ((this.idReportField.Equals(value) != true)) {
                    this.idReportField = value;
                    this.RaisePropertyChanged("idReport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> id_Material {
            get {
                return this.id_MaterialField;
            }
            set {
                if ((this.id_MaterialField.Equals(value) != true)) {
                    this.id_MaterialField = value;
                    this.RaisePropertyChanged("id_Material");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nombre_proyecto {
            get {
                return this.nombre_proyectoField;
            }
            set {
                if ((object.ReferenceEquals(this.nombre_proyectoField, value) != true)) {
                    this.nombre_proyectoField = value;
                    this.RaisePropertyChanged("nombre_proyecto");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSReporte.IServiceReport")]
    public interface IServiceReport {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/Insertar", ReplyAction="http://tempuri.org/IServiceReport/InsertarResponse")]
        bool Insertar(ClientePrueba.WSReporte.Reporte reporte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/Insertar", ReplyAction="http://tempuri.org/IServiceReport/InsertarResponse")]
        System.Threading.Tasks.Task<bool> InsertarAsync(ClientePrueba.WSReporte.Reporte reporte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/Editar", ReplyAction="http://tempuri.org/IServiceReport/EditarResponse")]
        void Editar(ClientePrueba.WSReporte.Reporte reporte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/Editar", ReplyAction="http://tempuri.org/IServiceReport/EditarResponse")]
        System.Threading.Tasks.Task EditarAsync(ClientePrueba.WSReporte.Reporte reporte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/Eliminar", ReplyAction="http://tempuri.org/IServiceReport/EliminarResponse")]
        bool Eliminar(ClientePrueba.WSReporte.Reporte reporte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/Eliminar", ReplyAction="http://tempuri.org/IServiceReport/EliminarResponse")]
        System.Threading.Tasks.Task<bool> EliminarAsync(ClientePrueba.WSReporte.Reporte reporte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/ConsultarTodos", ReplyAction="http://tempuri.org/IServiceReport/ConsultarTodosResponse")]
        ClientePrueba.WSReporte.Reporte[] ConsultarTodos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/ConsultarTodos", ReplyAction="http://tempuri.org/IServiceReport/ConsultarTodosResponse")]
        System.Threading.Tasks.Task<ClientePrueba.WSReporte.Reporte[]> ConsultarTodosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/ConsultarPorId", ReplyAction="http://tempuri.org/IServiceReport/ConsultarPorIdResponse")]
        ClientePrueba.WSReporte.Reporte ConsultarPorId(string idReporte);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceReport/ConsultarPorId", ReplyAction="http://tempuri.org/IServiceReport/ConsultarPorIdResponse")]
        System.Threading.Tasks.Task<ClientePrueba.WSReporte.Reporte> ConsultarPorIdAsync(string idReporte);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceReportChannel : ClientePrueba.WSReporte.IServiceReport, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceReportClient : System.ServiceModel.ClientBase<ClientePrueba.WSReporte.IServiceReport>, ClientePrueba.WSReporte.IServiceReport {
        
        public ServiceReportClient() {
        }
        
        public ServiceReportClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceReportClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceReportClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceReportClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Insertar(ClientePrueba.WSReporte.Reporte reporte) {
            return base.Channel.Insertar(reporte);
        }
        
        public System.Threading.Tasks.Task<bool> InsertarAsync(ClientePrueba.WSReporte.Reporte reporte) {
            return base.Channel.InsertarAsync(reporte);
        }
        
        public void Editar(ClientePrueba.WSReporte.Reporte reporte) {
            base.Channel.Editar(reporte);
        }
        
        public System.Threading.Tasks.Task EditarAsync(ClientePrueba.WSReporte.Reporte reporte) {
            return base.Channel.EditarAsync(reporte);
        }
        
        public bool Eliminar(ClientePrueba.WSReporte.Reporte reporte) {
            return base.Channel.Eliminar(reporte);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarAsync(ClientePrueba.WSReporte.Reporte reporte) {
            return base.Channel.EliminarAsync(reporte);
        }
        
        public ClientePrueba.WSReporte.Reporte[] ConsultarTodos() {
            return base.Channel.ConsultarTodos();
        }
        
        public System.Threading.Tasks.Task<ClientePrueba.WSReporte.Reporte[]> ConsultarTodosAsync() {
            return base.Channel.ConsultarTodosAsync();
        }
        
        public ClientePrueba.WSReporte.Reporte ConsultarPorId(string idReporte) {
            return base.Channel.ConsultarPorId(idReporte);
        }
        
        public System.Threading.Tasks.Task<ClientePrueba.WSReporte.Reporte> ConsultarPorIdAsync(string idReporte) {
            return base.Channel.ConsultarPorIdAsync(idReporte);
        }
    }
}
